module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    //input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    //input spi_ss,           // AVR SPI Slave Select
    //input spi_mosi,         // AVR SPI MOSI
    //input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    //input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    //input avr_rx_busy,       // AVR RX buffer full
    output r[8],
    output c[8],
    output r2[8],
    output c2[8],
    input btn_left,
    input btn_right,
    input btn_up,
    input btn_down,
    input btn_ok,
    output yellow[3],
    output green[2],
    input keys[7],
    output speaker,
    output sevenseg1[8],
    output sevenseg2[8]
    
  ) {
  
  sig rst;                                 // reset signal
  sig cr[8][8];                            //matrix 1
  sig cr2[8][8];                            //matrix 2
  sig music_num[2];
  sig score_dig1[4];
  sig score_dig2[4];
  sig temp1[172][8];
  sig temp2[172][8];
  sig op_a[8];
  sig op_b[8];
  sig opcode[6];
  
  songselection mysong(.clk(clk), .rst(rst));//get the song from the ROM
  display display(.clk(clk), .rst(rst));    //display matrix 1
  display display2(.clk(clk), .rst(rst));    //dsiplay matrix 2
  selsong songandspeed(.clk(clk), .rst(rst), .btn_left(btn_left), .btn_right(btn_right), .btn_up(btn_up), .btn_down(btn_down), .btn_ok(btn_ok));
  seven_seg my_seven_seg_1(.char(score_dig1[3:0]));
  seven_seg my_seven_seg_2(.char(score_dig2[3:0]));

  
  var j;
  
  dff gcounter[24](.clk(clk), .rst(rst));
  dff mycounter[25] (.clk(clk),.rst(rst));
  dff score[8](.clk(clk), .rst(rst));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    edge_detector detector0(#RISE(1), #FALL(0));
    button_conditioner cond0;
    
    edge_detector detector1(#RISE(1), #FALL(0));
    button_conditioner cond1;
    
    edge_detector detector2(#RISE(1), #FALL(0));
    button_conditioner cond2;
    
    edge_detector detector3(#RISE(1), #FALL(0));
    button_conditioner cond3;
    
    edge_detector detector4(#RISE(1), #FALL(0));
    button_conditioner cond4;
    
    edge_detector detector5(#RISE(1), #FALL(0));
    button_conditioner cond5;
    
    edge_detector detector6(#RISE(1), #FALL(0));
    button_conditioner cond6;
    
    edge_detector detector_center(#RISE(1), #FALL(0));
    button_conditioner cond_center;    

                            
    .rst(rst) {
      fsm global_state(#INIT(SONG_SELECTION)) = {SONG_SELECTION, PLAY};
      music mymusic(.music_num(music_num[1:0]), .mycounter(mycounter.q[24:0]));
      alu myalu(.a(op_a[7:0]), .b(op_b[7:0]), .alufn(opcode[5:0]));
      }
  }
  
  always {

    speaker = mymusic.speaker; // connect music to speaker
  
    cond0.in =keys[0];
    detector0.in =cond0.out;
    
    cond1.in =keys[1];
    detector1.in =cond1.out;
    
    cond2.in =keys[2];
    detector2.in =cond2.out;
    
    cond3.in =keys[3];
    detector3.in =cond3.out;    
    
    cond4.in =keys[4];
    detector4.in =cond4.out;
    
    cond5.in =keys[5];
    detector5.in =cond5.out;    
    
    cond6.in =keys[6];
    detector6.in =cond6.out; 
    
    cond_center.in = btn_ok;
    detector_center.in = cond_center.out;
    

    case (songandspeed.yellowled[2:0]) {
      
      b100:
        music_num = 1;
      b010:
        music_num = 2;
      b001:
        music_num = 3;
      default:
        music_num = 1;
      }

    gcounter.d = gcounter.q + 1;
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    // connect seven segment led
    score_dig1 = score.q[3:0];
    score_dig2 = score.q[7:4];
    
    sevenseg1[7:0] = my_seven_seg_1.segs[7:0];
    sevenseg2[7:0] = my_seven_seg_2.segs[7:0];
    
    case (global_state.q) {
      global_state.SONG_SELECTION:
          score.d =0;
          mycounter.d =0;		
	        gcounter.d =0;
        
          yellow[2:0] =songandspeed.yellowled[2:0];
          green[1:0] =songandspeed.greenled[1:0];
            for(j =0; j <8; j ++) {
    
            cr[j] =0;
            cr2[j] =0;
            
            }
            display.cr =cr;
            r =display.r;
            c =display.c;    
    
            display2.cr =cr2;
            r2 =display2.r;
            c2 =display2.c;
        
      if(detector6.out) {
            global_state.d =global_state.PLAY;  
      }  
      global_state.PLAY:
      
//select the global counter delay        
        
        if(songandspeed.greenled[1:0] ==b01) {
        
          if(gcounter.q ==0) {
            mycounter.d =mycounter.q +1;
            }
          } else if(songandspeed.greenled[1:0] ==b10) {
        
          if(gcounter.q[23] ==1) {
          
            mycounter.d =mycounter.q +1;
            gcounter.d =0;
            }
          }
        
        
//main play state
        

        if(songandspeed.yellowled[2:0] ==b001) {
          temp1 =mysong.song11;
          temp2 =mysong.song12;
          } else if(songandspeed.yellowled[2:0] ==b010) {
          temp1 =mysong.song21;
          temp2 =mysong.song22;
          } else {
          temp1 =mysong.song11;
          temp2 =mysong.song12;
          }
        
        
      for(j =0; j <8; j ++) {
    
      cr[j] =temp1[j+mycounter.q];
      cr2[j] =temp2[j +mycounter.q];
      }
        
      display.cr =cr;
      r =display.r;
      c =display.c;    
    
      display2.cr =cr2;
      r2 =display2.r;
      c2 =display2.c;  
              
      yellow[2:0] =b000;
       green[1:0] =b00;
        
        // ALU Function Starts
        
        // ALU Comparator for case compare
        op_a = b10101010;
        op_b = cr[0][7:0];
        opcode = b110011;
        if(cr[0] ==b10101010) {
          global_state.d =global_state.SONG_SELECTION;
          }
        
        if(detector0.out) {     
        if(cr[0] ==b01100000 || cr[1] ==b01100000) {  
          
          // ALU Adder for score adding
            opcode =b000000;
            op_a =score.q;
            op_b =b00000001;      
            score.d =myalu.out;}else{
           
          // ALU COMPLT to keep the score as a non-negative number   
            opcode =b110101;
            op_a =b00000000;
            op_b =score.q;
            if (myalu.out[0] ){
            score.d =score.q -1;}}}      
                
        if(detector1.out) {     
        if(cr[0] ==b00011000 ||cr[1] ==b00011000) {     
          score.d =score.q +1;}else{   
            if (score.q > 0 ){
           // ALU Subtracter for score subtracting
              opcode =b000001;
              op_a =score.q;
              op_b =b00000001;      
            score.d =myalu.out;}} }     
                    
        if(detector2.out) {     
        if(cr[0] ==b00000110 ||cr[1] ==b00000110) {     
          score.d =score.q +1;}else{  
            if (score.q > 0 ){       
            score.d =score.q - 1;}}}      
                    
        if(detector3.out) {     
        if(cr[0] ==b00000001 ||cr[1] ==b00000001) {     
          score.d =score.q +1;}else{
            if (score.q > 0 ){         
            score.d =score.q - 1;}}}      
                    
        if(detector4.out) {     
        if(cr2[0] ==b01100000 ||cr2[1] ==b01100000) {        
          score.d =score.q +1;}else{
            if (score.q > 0 ){         
            score.d =score.q - 1;}}}      
                    
        if(detector5.out) {     
        if(cr2[0] ==b00011000 ||cr2[1] ==b00011000) {        
          score.d =score.q +1;}else{
            if (score.q > 0 ){         
            score.d =score.q - 1;}}}      
                    
        if(detector6.out) {     
        if(cr2[0] ==b00000110 ||cr2[1] ==b00000110) {        
          score.d =score.q +1;}else{ 
            if (score.q > 0 ){        
            score.d =score.q - 1;}}}
        
        if (detector_center.out) {
          global_state.d = global_state.SONG_SELECTION;
          }     
        

//default state        
      default:
            for(j =0; j <8; j ++) {
    
            cr[j] =0;
            cr2[j] =0;
            
            }
            display.cr =cr;
            r =display.r;
            c =display.c;    
    
            display2.cr =cr2;
            r2 =display2.r;
            c2 =display2.c;
       yellow[2:0] =b000;
       green[1:0] =b00; 
        
  }
}
}