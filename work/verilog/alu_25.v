/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_25 (
    input clk,
    input rst,
    input [7:0] a,
    input [7:0] b,
    input [5:0] alufn,
    output reg [7:0] out
  );
  
  
  
  wire [8-1:0] M_aluadder_out;
  wire [1-1:0] M_aluadder_z;
  wire [1-1:0] M_aluadder_v;
  wire [1-1:0] M_aluadder_n;
  adder_48 aluadder (
    .a(a),
    .b(b),
    .alufn(alufn[0+0-:1]),
    .out(M_aluadder_out),
    .z(M_aluadder_z),
    .v(M_aluadder_v),
    .n(M_aluadder_n)
  );
  wire [8-1:0] M_alucomparator_op;
  comparator_49 alucomparator (
    .a(a),
    .b(b),
    .alufn(alufn[1+1-:2]),
    .op(M_alucomparator_op)
  );
  wire [8-1:0] M_aluboolean_out;
  boolean_50 aluboolean (
    .a(a),
    .b(b),
    .alufn(alufn[0+3-:4]),
    .out(M_aluboolean_out)
  );
  wire [8-1:0] M_alushifter_out;
  shifter_51 alushifter (
    .a(a),
    .b(b),
    .alufn(alufn[0+1-:2]),
    .out(M_alushifter_out)
  );
  wire [8-1:0] M_alumultiply_out;
  multiply_52 alumultiply (
    .a(a),
    .b(b),
    .alufn(alufn[0+1-:2]),
    .out(M_alumultiply_out)
  );
  
  always @* begin
    out = 1'h0;
    
    case (alufn[4+1-:2])
      2'h0: begin
        if (alufn[1+0-:1] == 1'h1) begin
          out = M_alumultiply_out;
        end else begin
          out = M_aluadder_out;
        end
      end
      2'h3: begin
        out = M_alucomparator_op;
      end
      2'h1: begin
        out = M_aluboolean_out;
      end
      2'h2: begin
        out = M_alushifter_out;
      end
      default: begin
        out = 1'h0;
      end
    endcase
  end
endmodule
