/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module selsong_4 (
    input clk,
    input rst,
    input btn_left,
    input btn_right,
    input btn_up,
    input btn_down,
    input btn_ok,
    output reg [2:0] yellowled,
    output reg [1:0] greenled
  );
  
  
  
  wire [1-1:0] M_edge_detector1_out;
  reg [1-1:0] M_edge_detector1_in;
  edge_detector_8 edge_detector1 (
    .clk(clk),
    .in(M_edge_detector1_in),
    .out(M_edge_detector1_out)
  );
  wire [1-1:0] M_button_cond1_out;
  reg [1-1:0] M_button_cond1_in;
  button_conditioner_9 button_cond1 (
    .clk(clk),
    .in(M_button_cond1_in),
    .out(M_button_cond1_out)
  );
  wire [1-1:0] M_edge_detector2_out;
  reg [1-1:0] M_edge_detector2_in;
  edge_detector_8 edge_detector2 (
    .clk(clk),
    .in(M_edge_detector2_in),
    .out(M_edge_detector2_out)
  );
  wire [1-1:0] M_button_cond2_out;
  reg [1-1:0] M_button_cond2_in;
  button_conditioner_9 button_cond2 (
    .clk(clk),
    .in(M_button_cond2_in),
    .out(M_button_cond2_out)
  );
  wire [1-1:0] M_edge_detector3_out;
  reg [1-1:0] M_edge_detector3_in;
  edge_detector_8 edge_detector3 (
    .clk(clk),
    .in(M_edge_detector3_in),
    .out(M_edge_detector3_out)
  );
  wire [1-1:0] M_button_cond3_out;
  reg [1-1:0] M_button_cond3_in;
  button_conditioner_9 button_cond3 (
    .clk(clk),
    .in(M_button_cond3_in),
    .out(M_button_cond3_out)
  );
  wire [1-1:0] M_edge_detector4_out;
  reg [1-1:0] M_edge_detector4_in;
  edge_detector_8 edge_detector4 (
    .clk(clk),
    .in(M_edge_detector4_in),
    .out(M_edge_detector4_out)
  );
  wire [1-1:0] M_button_cond4_out;
  reg [1-1:0] M_button_cond4_in;
  button_conditioner_9 button_cond4 (
    .clk(clk),
    .in(M_button_cond4_in),
    .out(M_button_cond4_out)
  );
  wire [1-1:0] M_edge_detector5_out;
  reg [1-1:0] M_edge_detector5_in;
  edge_detector_8 edge_detector5 (
    .clk(clk),
    .in(M_edge_detector5_in),
    .out(M_edge_detector5_out)
  );
  wire [1-1:0] M_button_cond5_out;
  reg [1-1:0] M_button_cond5_in;
  button_conditioner_9 button_cond5 (
    .clk(clk),
    .in(M_button_cond5_in),
    .out(M_button_cond5_out)
  );
  localparam SONG1_yellow_state = 2'd0;
  localparam SONG2_yellow_state = 2'd1;
  localparam SONG3_yellow_state = 2'd2;
  
  reg [1:0] M_yellow_state_d, M_yellow_state_q = SONG2_yellow_state;
  localparam SPEED1_green_state = 1'd0;
  localparam SPEED2_green_state = 1'd1;
  
  reg M_green_state_d, M_green_state_q = SPEED1_green_state;
  
  always @* begin
    M_green_state_d = M_green_state_q;
    M_yellow_state_d = M_yellow_state_q;
    
    M_button_cond1_in = btn_left;
    M_edge_detector1_in = M_button_cond1_out;
    M_button_cond2_in = btn_right;
    M_edge_detector2_in = M_button_cond2_out;
    M_button_cond3_in = btn_up;
    M_edge_detector3_in = M_button_cond3_out;
    M_button_cond4_in = btn_down;
    M_edge_detector4_in = M_button_cond4_out;
    M_button_cond5_in = btn_ok;
    M_edge_detector5_in = M_button_cond5_out;
    
    case (M_yellow_state_q)
      SONG1_yellow_state: begin
        yellowled[0+2-:3] = 3'h4;
        if (M_edge_detector2_out) begin
          M_yellow_state_d = SONG2_yellow_state;
        end
        if (M_edge_detector3_out) begin
          M_yellow_state_d = SONG3_yellow_state;
        end
      end
      SONG2_yellow_state: begin
        yellowled[0+2-:3] = 3'h2;
        if (M_edge_detector1_out) begin
          M_yellow_state_d = SONG1_yellow_state;
        end
        if (M_edge_detector3_out) begin
          M_yellow_state_d = SONG3_yellow_state;
        end
      end
      SONG3_yellow_state: begin
        yellowled[0+2-:3] = 3'h1;
        if (M_edge_detector1_out) begin
          M_yellow_state_d = SONG1_yellow_state;
        end
        if (M_edge_detector2_out) begin
          M_yellow_state_d = SONG2_yellow_state;
        end
      end
      default: begin
        yellowled = 3'h1;
      end
    endcase
    
    case (M_green_state_q)
      SPEED1_green_state: begin
        greenled = 2'h1;
        if (M_edge_detector4_out) begin
          M_green_state_d = SPEED2_green_state;
        end
      end
      SPEED2_green_state: begin
        greenled = 2'h2;
        if (M_edge_detector5_out) begin
          M_green_state_d = SPEED1_green_state;
        end
      end
      default: begin
        greenled = 2'h1;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_yellow_state_q <= 1'h1;
      M_green_state_q <= 1'h0;
    end else begin
      M_yellow_state_q <= M_yellow_state_d;
      M_green_state_q <= M_green_state_d;
    end
  end
  
endmodule
