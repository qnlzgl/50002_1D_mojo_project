/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module music_24 (
    input clk,
    input rst,
    input [1:0] music_num,
    input [24:0] mycounter,
    output reg speaker
  );
  
  
  
  reg [30:0] M_tone_d, M_tone_q = 1'h0;
  
  always @* begin
    M_tone_d = M_tone_q;
    
    M_tone_d = M_tone_q + 1'h1;
  end
  
  reg [7:0] fullnote;
  
  wire [8-1:0] M_get_fullnote_note;
  music_ROM_46 get_fullnote (
    .clk(clk),
    .address(mycounter[0+24-:25]),
    .music_num(music_num[0+1-:2]),
    .note(M_get_fullnote_note)
  );
  
  reg [2:0] octave;
  
  reg [3:0] note;
  
  reg [8:0] M_clkdivider_d, M_clkdivider_q = 1'h0;
  
  reg M_speaker_dff_d, M_speaker_dff_q = 1'h0;
  
  wire [3-1:0] M_get_octave_and_note_quotient;
  wire [4-1:0] M_get_octave_and_note_remainder;
  divide_by12_47 get_octave_and_note (
    .clk(clk),
    .rst(rst),
    .numerator(M_get_fullnote_note[0+5-:6]),
    .quotient(M_get_octave_and_note_quotient),
    .remainder(M_get_octave_and_note_remainder)
  );
  
  always @* begin
    octave[0+2-:3] = M_get_octave_and_note_quotient[0+2-:3];
    note[0+3-:4] = M_get_octave_and_note_remainder[0+3-:4];
    fullnote[0+7-:8] = M_get_fullnote_note[0+7-:8];
    speaker = M_speaker_dff_q;
  end
  
  always @* begin
    M_clkdivider_d = M_clkdivider_q;
    
    
    case (note)
      1'h0: begin
        M_clkdivider_d = 9'h1ff;
      end
      1'h1: begin
        M_clkdivider_d = 9'h1e2;
      end
      2'h2: begin
        M_clkdivider_d = 9'h1c7;
      end
      2'h3: begin
        M_clkdivider_d = 9'h1ae;
      end
      3'h4: begin
        M_clkdivider_d = 9'h195;
      end
      3'h5: begin
        M_clkdivider_d = 9'h17f;
      end
      3'h6: begin
        M_clkdivider_d = 9'h169;
      end
      3'h7: begin
        M_clkdivider_d = 9'h155;
      end
      4'h8: begin
        M_clkdivider_d = 9'h142;
      end
      4'h9: begin
        M_clkdivider_d = 9'h12f;
      end
      4'ha: begin
        M_clkdivider_d = 9'h11e;
      end
      4'hb: begin
        M_clkdivider_d = 9'h10e;
      end
      default: begin
        M_clkdivider_d = 1'h0;
      end
    endcase
  end
  
  reg [8:0] M_counter_note_d, M_counter_note_q = 1'h0;
  
  reg [7:0] M_counter_octave_d, M_counter_octave_q = 1'h0;
  
  always @* begin
    M_counter_note_d = M_counter_note_q;
    
    M_counter_note_d = (M_counter_note_q == 1'h0) ? M_clkdivider_q : M_counter_note_q - 1'h1;
  end
  
  always @* begin
    M_counter_octave_d = M_counter_octave_q;
    
    if (M_counter_note_q == 1'h0) begin
      M_counter_octave_d = (M_counter_octave_q == 1'h0) ? 8'hff >> octave : M_counter_octave_q - 1'h1;
    end
  end
  
  always @* begin
    M_speaker_dff_d = M_speaker_dff_q;
    
    if (M_counter_note_q == 1'h0 && M_counter_octave_q == 1'h0 && fullnote != 1'h0 && M_tone_q[18+3-:4] != 1'h0) begin
      M_speaker_dff_d = ~M_speaker_dff_q;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_octave_q <= 1'h0;
    end else begin
      M_counter_octave_q <= M_counter_octave_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_tone_q <= 1'h0;
    end else begin
      M_tone_q <= M_tone_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_speaker_dff_q <= 1'h0;
    end else begin
      M_speaker_dff_q <= M_speaker_dff_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_clkdivider_q <= 1'h0;
    end else begin
      M_clkdivider_q <= M_clkdivider_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_note_q <= 1'h0;
    end else begin
      M_counter_note_q <= M_counter_note_d;
    end
  end
  
endmodule
